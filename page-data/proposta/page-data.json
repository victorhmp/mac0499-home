{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/proposta/","result":{"data":{"site":{"siteMetadata":{"title":"MAC0499 - TCC"}},"markdownRemark":{"id":"7f1d5b9d-65b0-5d4f-9852-8710726bb018","excerpt":"Introdução Documentação de software O tema central do trabalho que será desenvolvido ao longo do ano é a documentação de software. Algo presente em todos os…","html":"<h2>Introdução</h2>\n<hr>\n<h3>Documentação de <em>software</em></h3>\n<p>O tema central do trabalho que será desenvolvido ao longo do ano é a documentação de <em>software</em>. Algo presente em todos os sistemas de <em>software</em>, em formas variadas, desde especificações de requisitos de um sistema, documentações utilizadas para justificar e detalhar a arquitetura de sistemas de <em>software</em>, que são os tipos de documentação mais “distantes” do código-fonte de um dado sistema, até documentações de uso de APIs e comentários em código, o mais próximo possível do código-fonte.</p>\n<p>Apesar da grande importância de uma documentação para a utilização e manutênção de um sistema de <em>software</em>, estudos comprovam que, de maneira geral, engenheiros de <em>software</em> não costumam atualizar documentações tão frequentemente, ou mesmo suficientemente, quanto mudanças no código são feitas, e existe uma percepção na comunidade de que o trabalho em melhoras de documentação são custosas e não trazem tanto benefício quanto a implementação de novas funcionalidades ou resolução de <em>bugs,</em> por isso não são feitas com tanta frequência, e até vistas como “perda de tempo” por alguns desenvolvedores [1].</p>\n<p>Em estudos realizados para compreender o motivo dessa visão, foram levantadas diferenças significativas quanto a percepção e a disposição de manutênção por parte de engenheiros de <em>software</em> de acordo com o nível de abstração e de detalhe das diversas documentações que um dado sistema possui. Esse será o primeiro ponto de interesse deste trabalho. Vamos estudar qual a relevância da documentação de <em>software</em> - no seu sentido mais amplo, em <em>softwares</em> de diversas naturezas - para a sua utilização, de acordo com estudos já realizados.</p>\n<h3>Importância da documentação em <em>software open-source</em></h3>\n<p>Neste trabalho vamos focar especialmente na documentação de <em>software open-source,</em> ou seja, <em>softwares</em> de código-aberto em que, em geral, têm sua manutenção realizada não apenas por um time responsável, mas por uma comunidade de desenvolvedores.</p>\n<p>Projetos de <em>software open-source</em> possuem diferenças fundamentais a <em>softwares</em> de código-fechado (<em>closed-source</em>) quando ao seu processo de manutenção, controle de qualidade e sua documentação [2]. Uma delas é a falta de processos bem estabelecidos quanto a documentação, sendo esta abordada de diversas maneiras de acordo com as particularidades de cada projeto.</p>\n<p>Uma pesquisa realizada por mim sobre as diferentes abordagens por diversos projetos <em>open-source</em> está disponível em <a href=\"https://linux.ime.usp.br/~victorhmp/mac0499-preliminar.pdf\">Pesquisa preliminar</a>.</p>\n<p>Uma necessidade particular desse tipo de projeto é a da criação de uma comunidade saudável e acessível para contribuidores, e é nessa parte que esperamos observar um papel central de uma boa documentação, com base nos resultados aprensentados em [3].</p>\n<h3>Cultura de documentação</h3>\n<p>Outro tópico que vamos abordar durante esse trabalho é a importância e o processo de criação de uma “cultura de documentação”, ou seja, uma cultura que incentive e valorize a criação e manutenção de documentação de <em>software</em> por parte do time <em>core</em> [2] de um projeto <em>open-source</em> e sua comunidade.</p>\n<p>Esse tópico será de extrema importância quando formos avaliar a evolução do <em>software</em> que utilizaremos como caso de estudo na parte final do trabalho.</p>\n<h3>VTEX IO</h3>\n<p>O VTEX IO é uma plataforma de desenvolvimento low-code e cloud-native que busca permitir que desenvolvedores entreguem soluções de negócio de maneira mais rápida e eficiente, sem se preocupar com infraestrutura ou processos de build de suas aplicações. Ela é utilizada para desenvolvimento de projetos de <em>front-end</em> modernos, aplicações que extendem o ambiente de <em>admin</em> da VTEX para auxiliar lojistas a melhorarem sua performance de venda, até aplicações <em>back-end</em> com uso de <a href=\"https://nodejs.org/\"><em>Node.js</em></a> e <a href=\"https://graphql.org/\"><em>GraphQL</em></a>. O desenvolvimento de todas as aplicações é fortemente opinionado por <em>frameworks</em> que garantem um desenvolvimento rápido e seguro.</p>\n<p>Durante os últimos 14 meses, tenho trabalhado diratamente com o VTEX IO, sendo que durante os últimos 7 desses meses, tenho trabalhado no time que desenvolve o VTEX IO, mais especificamente o time que desenvolve o <em>framework</em> de criação de lojas, chamado <em>Store Framework</em>, composto por diversas aplicações <em>open-source</em>. Durante esse tempo, tive um papel muito ativo na criação de uma cultura de documentação entre todos os desenvolvedores da plataforma, com a ajuda de <em>designers, technical writters</em> e <em>project managers</em>. Um dos passos mais importantes na criação de tal cultura foi a criação de um <strong>sistema de documentação</strong>, dentro do próprio VTEX IO para conseguir centralizar uma documentação até então escassa e despersa. Todo o desenvolvimento e arquitetura desse sistema foi feito por mim com a ajuda de engenheiros da VTEX, e agora a documentação do VTEX IO pode ser encontrada em <a href=\"https://vtex.io/docs\">VTEX IO Docs</a>. Mais detalhes desse sistema pode ser encontrado na pesquisa preliminar citada na sessão anterior, disponível em <a href=\"https://linux.ime.usp.br/~victorhmp/mac0499-preliminar.pdf\">Pesquisa preliminar</a>, e serão descritos em detalhe na monografia.</p>\n<p>Vamos utilizar o VTEX IO como um caso de estudo, e pretendemos avaliar o efeito que a criação de uma cultura de desenvolvimento, principalmente entre o time <em>core</em> de desenvolvimento de um projeto <em>open-source,</em> tem impactado o sucesso do projeto e o engajamento da comunidade.</p>\n<h2>Objetivos</h2>\n<hr>\n<p>Os principais objetivos que estamos buscanco atingir são os seguintes:</p>\n<ul>\n<li>Investigar qual a relevância empregada a documentação por engenheiros de <em>software</em>, e como sua ela é utilizada;</li>\n<li>Qual seu papel no sucesso de um projeto <em>open-source</em>;</li>\n<li>Nos basear no caso de estudo do VTEX IO para avaliar o efeito que a criação de uma cultura, principalmente entre o time <em>core</em> de desenvolvimento de um projeto <em>open-source</em>, que incentive a criação e manutenção dessa documentação impacta o sucesso de tal projeto.</li>\n</ul>\n<h2>Cronograma aproximado de atividades</h2>\n<hr>\n<p>As atividades que esperamos realizar durante o trabalho, visando a obtenção dos objetivos definidos acima são as seguintes, junto com estimativas dos meses de trabalho em cada uma delas:</p>\n<ol>\n<li>[<em>março - maio</em>] Estudo de soluções existentes de documentação;</li>\n<li>[<em>março - maio</em>] Estudo de artigos sobre como a documentação de <em>software</em> é vista e utilizada por engenheiros de <em>software</em> e desenvolvedores em geral;</li>\n<li>[<em>abril - junho</em>] Estudo sobre como a documentação de projetos <em>open-source</em> de sucesso são mantidas, como evoluem, o quão suficiente elas são, e qual a sua importância no sucesso desses projetos, principalmente no crescimento de suas comunidades;</li>\n<li>[<em>julho - agosto</em>] Iniciar estudo de caso com a coleta de estatísticas sobre o uso da documentação do VTEX IO;</li>\n<li>[<em>agosto - setembro</em>] Buscar entender a evolução da documentação do VTEX IO e o impacto que a criação do sistema de documentação e consequente implantação da nova cultura de desenvolvimento tiveram no crescimento e engajamento da sua comunidade;</li>\n<li>[<em>maio - novembro</em>] Escrever monografia;</li>\n<li>[<em>novembro</em>] Elaborar pôster para apresentação do trabalho final.</li>\n</ol>\n<h2>Referências</h2>\n<hr>\n<p>[1] T. C. Lethbridge, J. Singer and A. Forward, “How software engineers use documentation: the state of the practice,” in IEEE Software, vol. 20, no. 6, pp. 35-39, Nov.-Dec. 2003.</p>\n<p>[2] M. Aberdour, “Achieving Quality in Open-Source Software,” in IEEE Software, vol. 24, no. 1, pp. 58-64, Jan.-Feb. 2007.</p>\n<p>[3] A. Mockus, R. Fielding, and J. Herbsleb, “Two Case Studies of Open Source Software Development: Apache and Mozilla,” ACM Trans. Software Eng. and Methodology (TOSEM), vol. 11, no. 3, 2002, pp. 309–346.</p>","frontmatter":{"title":"Proposta de Trabalho","date":"April 20, 2020","description":"Descrição do que se pretende fazer no trabalho."}}},"pageContext":{"slug":"/proposta/","previous":null,"next":null}}}